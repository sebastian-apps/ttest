"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdatevueapp"]("app",{

/***/ "./src/welchs.js":
/*!***********************!*\
  !*** ./src/welchs.js ***!
  \***********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mathjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mathjs */ \"./node_modules/mathjs/lib/esm/entry/pureFunctionsAny.generated.js\");\n// function drawAlphaCurve(group1, crit_t_value){\n//     // Fill the area under the curve representing alpha.\n//     let alpha_curve = [];\n//     // this datapoint connects with the critical t vertical line\n//     alpha_curve.push({x: crit_t_value, y: t_Distrib(crit_t_value, group1.df)});\n//     for(var i = 0; i < group1.dist.length; i++) {\n//       if (group1.dist[i]['x'] > crit_t_value){\n//         alpha_curve.push({x: group1.dist[i]['x'], y: group1.dist[i]['y']});\n//       }\n//     }\n//     lineChart.data.datasets[3]['data'] = alpha_curve;\n//     lineChart.update();\n//   }\n\n//   function drawBetaCurve(group2, crit_t_value){\n//     // Fill the area under the curve representing beta.\n//     let beta_curve = [];\n//     for(var i = 0; i < group2.dist.length; i++) {\n//       if (group2.dist[i]['x'] < crit_t_value){\n//         beta_curve.push({x: group2.dist[i]['x'], y: group2.dist[i]['y']});\n//       }\n//     }\n//     // this datapoint connects with the critical t vertical line\n//     beta_curve.push({x: crit_t_value, y: t_Distrib(crit_t_value-ncp, group2.df)}); // ncp acts as offset\n//     lineChart.data.datasets[4]['data'] = beta_curve;\n//     lineChart.update();\n//   }\n\n// function t_Distrib(t, dof){\n//   // For a given x, return the t distribution y value.\n//   y = (math.gamma((dof+1)/2)/(math.sqrt(dof*math.pi)*math.gamma(dof/2))) * (1+((t**2)/dof))**(-(dof+1)/2);\n//   return math.round(y, 6);\n// }\n\n// function getAlpha(crit_t_value, df){\n//   return 1 - computeArea(crit_t_value, df);\n// }\n\n// function getBeta(crit_t_value_beta, df){\n//   return computeArea(crit_t_value_beta, df);\n// }\n\n// function getRocCurve(axes){\n//   console.log(\"axes.x_max\", axes.x_max);\n//   console.log(\"axes.x_min:\", axes.x_min);\n//   let partitions = 25;\n//   step_size = (axes.x_max - axes.x_min)/partitions;\n//   console.log(\"step_size:\", step_size);\n//   console.log();\n//   roc_curve=[];\n//   // crit_t_value_beta = crit_t_value - ncp;\n//   for(var i = 0; i <= partitions; i++) {\n//     roc_curve.push({x: getAlpha((axes.x_min+(i*step_size)), df), y: 1-getBeta(((axes.x_min+(i*step_size)))-ncp, df)});    \n//   }\n//   console.log(\"roc_curve:\", roc_curve);\n//   return roc_curve;\n// }\n\n// function getAUC(axes){\n//   // calculate AUC using the left Riemann Sum\n//   console.log(\"axes.x_max\", axes.x_max);\n//   console.log(\"axes.x_min:\", axes.x_min);\n//   let partitions = 500;\n//   let step_size = (axes.x_max - axes.x_min)/partitions;\n//   console.log(\"step_size:\", step_size);\n//   console.log();\n//   let roc_curve=[];\n//   let auc = 0;\n//   for (var i = 0; i <= partitions; i++) {\n//     roc_curve.push({x: getAlpha((axes.x_min+(i*step_size)), df), y: 1-getBeta(((axes.x_min+(i*step_size)))-ncp, df)});    \n//   }\n//   // calculate left Riemann Sum\n//   for (var i = 0; i < roc_curve.length-1; i++) {\n//     auc = auc + (roc_curve[i].x-roc_curve[i+1].x)*roc_curve[i].y;\n//   }\n\n//   console.log(\"auc:\", auc);\n//   return math.round(auc, 2);\n// }\n\n\n// import Chart from \"chart.js\";\n\nvar welchs = {\n  // // provides shorthand for getting element id\n  // elem(elem_id){\n  //   return document.getElementById(elem_id);\n  // },\n\n  getFalseDiscoveryRate(FP, TP) {\n    console.log(\"FDR input FP:\", FP);\n    console.log(\"FDR input TP:\", TP);\n    return mathjs__WEBPACK_IMPORTED_MODULE_0__.round(100 * Number(FP) / (Number(FP) + Number(TP)), 2);\n  }\n\n  // getAlpha(crit_t_value, df){\n  //   return 1 - computeArea(crit_t_value, df);\n  // },\n\n  // getBeta(crit_t_value_beta, df){\n  //   return computeArea(crit_t_value_beta, df);\n  // },\n\n  // getRocCurve(axes, df, ncp){\n  //   console.log(\"axes.x_max\", axes.x_max);\n  //   console.log(\"axes.x_min:\", axes.x_min);\n  //   let partitions = 25;\n  //   step_size = (axes.x_max - axes.x_min)/partitions;\n  //   console.log(\"step_size:\", step_size);\n  //   console.log();\n  //   roc_curve=[];\n  //   // crit_t_value_beta = crit_t_value - ncp;\n  //   for(var i = 0; i <= partitions; i++) {\n  //     roc_curve.push({x: getAlpha((axes.x_min+(i*step_size)), df), y: 1-getBeta(((axes.x_min+(i*step_size)))-ncp, df)});    \n  //   }\n  //   console.log(\"roc_curve:\", roc_curve);\n  //   return roc_curve;\n  // },\n\n  // roc_curve: \n  //   [{x:0.9995, y: 1}, \n  //   {x:0.999, y: 1}, \n  //   {x:0.9979, y: 0.9999}, \n  //   {x:0.9955, y: 0.9999}, \n  //   {x:0.9902, y: 0.9998}, \n  //   {x:0.9786, y: 0.9995}, \n  //   {x:0.9534, y: 0.9991}, \n  //   {x:0.9021, y: 0.9981}, \n  //   {x:0.8087, y: 0.996}, \n  //   {x:0.6644, y: 0.9914}, \n  //   {x:0.48419999999999996, y: 0.9813}, \n  //   {x:0.3077, y: 0.9591}, \n  //   {x:0.17179999999999995, y: 0.9134}, \n  //   {x:0.08660000000000001, y: 0.8282}, \n  //   {x:0.04090000000000005, y: 0.6923}, \n  //   {x:0.01870000000000005, y: 0.5158}, \n  //   {x:0.008600000000000052, y: 0.3356}, \n  //   {x:0.0040000000000000036, y: 0.19130000000000003}, \n  //   {x:0.0019000000000000128, y: 0.09789999999999999}, \n  //   {x:0.0009000000000000119, y: 0.046599999999999975}, \n  //   {x:0.0004999999999999449, y: 0.021399999999999975}, \n  //   {x:0.00019999999999997797, y: 0.009800000000000031}, \n  //   {x:0.00009999999999998899, y: 0.0044999999999999485}, \n  //   {x:0.00009999999999998899, y: 0.0020999999999999908}, \n  //   {x:0, y: 0.0010000000000000009}, \n  //   {x:0, y: 0.0004999999999999449}],\n\n  //   t_value: -2.2502,\n  //   p_value: 0.0255,\n\n  // getROCChart(roc_curve, t_value, p_value){\n  // return new Chart(elem(\"roc_curve\"), {\n  //     type: 'scatter',\n  //     data: {\n  //       datasets: [{\n  //           data: [\n  //             {x: 0, y: 0},\n  //             {x: 1, y: 1},\n  //           ],\n  //           label: \"refs\",\n  //           borderColor: \"transparent\",\n  //           fill: false\n  //         },{\n  //           data: [], \n  //           label: \"TPR\",\n  //           borderColor: \"#000000\",\n  //           backgroundColor: \"#000000\",\n  //           fill: true,\n  //           pointRadius: 4\n  //         }, {\n  //           data: [{x:0,y:0}, {x:1,y:1}], // random curve for reference\n  //           label: \"Random\",\n  //           borderColor: \"#dedede\",\n  //           fill: false\n  //         },{\n  //           data: roc_curve,\n  //           label: \"ROC curve\",\n  //           borderColor: \"#7600bc\",\n  //           backgroundColor: \"#ca5cdd\",\n  //           fill: true\n  //           // ,pointRadius: 4\n  //         }\n  //       ]\n  //     },\n  //     options: {\n  //       animation: false,\n  //       title: {\n  //         display: false,\n  //         text: 't-test'\n  //       },\n  //       legend:{\n  //         position: 'bottom',\n  //         labels: {\n  //           filter: function(item, chart) {\n  //               return !item.text.includes('refs'); // Remove the refs legend item\n  //             },\n  //            usePointStyle: true,\n  //          },\n  //       },\n  //       elements: {\n  //         point:{\n  //             radius: 0\n  //         }\n  //       },\n  //       scales: {\n  //         xAxes: [{\n  //             ticks : {\n  //               min: 0,\n  //               stepSize: 0.2,\n  //               // stepValue: 0.2,\n  //               steps: 10,\n  //               max: 1,\n  //             },\n  //           display: true,\n  //           gridLines: {\n  //             display:false,\n  //           },\n  //           scaleLabel: {\n  //             display: true,\n  //             labelString: 'False positive rate (\\u03B1)'\n  //           }\n  //         }],\n  //         yAxes: [{\n  //           ticks : {\n  //             min: 0,\n  //             stepSize: 0.2,\n  //             max: 1,\n  //           },\n  //           display: true,\n  //           scaleLabel: {\n  //             display: true,\n  //             labelString: 'True positive rate (1 - \\u03B2)'\n  //           },\n  //           gridLines: {\n  //               display:false\n  //           }\n  //         }]\n  //       },\n  //       annotation: {\n  //         annotations: [{\n  //           type: 'line',\n  //           mode: 'vertical',\n  //           scaleID: 'x-axis-1',\n  //           value: t_value,\n  //           borderColor: '#c8c8c8',\n  //           borderWidth: 2,\n  //           borderDash: [10,5],\n  //           label: {\n  //             enabled: true,\n  //             content: 'p = ',\n  //             backgroundColor: 'transparent',\n  //             fontColor: '#c8c8c8',\n  //             position: \"top\",\n  //           }\n  //         },{\n  //           type: 'line',\n  //           mode: 'vertical',\n  //           scaleID: 'x-axis-1',\n  //           value: p_value,\n  //           borderColor: '#ff7034',\n  //           borderWidth: 2,\n  //           label: {\n  //             enabled: true,\n  //             content: '',\n  //             backgroundColor: 'transparent',\n  //             fontColor: '#4d4e4f',\n  //             yAdjust: 20,\n  //             position: \"top\",\n  //           }\n  //         }\n  //         ],\n  //         drawTime: \"afterDatasetsDraw\" \n  //       }\n  //     }\n  //   });\n  // },\n\n  // computeArea(x, df) {\n  //     X=eval(x)\n  //     df=eval(df)\n  //     with (Math) {\n  //     if (df<=0) {\n  //       alert(\"Degrees of freedom must be positive\")\n  //     } else {\n  //       A=df/2;\n  //       S=A+.5;\n  //       Z=df/(df+X*X);\n  //       BT=exp(LogGamma(S)-LogGamma(.5)-LogGamma(A)+A*log(Z)+.5*log(1-Z));\n  //       if (Z<(A+1)/(S+2)) {\n  //         betacdf=BT*Betinc(Z,A,.5)\n  //       } else {\n  //         betacdf=1-BT*Betinc(1-Z,.5,A)\n  //       }\n  //       if (X<0) {\n  //         tcdf=betacdf/2\n  //       } else {\n  //         tcdf=1-betacdf/2\n  //       }\n  //     }\n  //     // tcdf=round(tcdf*100000)/100000;\n  //     // tcdf=tcdf*100000/100000;\n  //   }\n  //     return round(tcdf);\n  // },\n\n  // LogGamma(Z) {\n  //   with (Math) {\n  //     var S=1+76.18009173/Z-86.50532033/(Z+1)+24.01409822/(Z+2)-1.231739516/(Z+3)+.00120858003/(Z+4)-.00000536382/(Z+5);\n  //     var LG= (Z-.5)*log(Z+4.5)-(Z+4.5)+log(S*2.50662827465);\n  //   }\n  //   return LG\n  // },\n\n  // Betinc(X,A,B) {\n  //   var A0=0;\n  //   var B0=1;\n  //   var A1=1;\n  //   var B1=1;\n  //   var M9=0;\n  //   var A2=0;\n  //   var C9;\n  //   while (Math.abs((A1-A2)/A1)>.00001) {\n  //     A2=A1;\n  //     C9=-(A+M9)*(A+B+M9)*X/(A+2*M9)/(A+2*M9+1);\n  //     A0=A1+C9*A0;\n  //     B0=B1+C9*B0;\n  //     M9=M9+1;\n  //     C9=M9*(B-M9)*X/(A+2*M9-1)/(A+2*M9);\n  //     A1=A0+C9*A1;\n  //     B1=B0+C9*B1;\n  //     A0=A0/B1;\n  //     B0=B0/B1;\n  //     A1=A1/B1;\n  //     B1=1;\n  //   }\n  //   return A1/A\n  // },\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (welchs);\n\n// function getFalseDiscoveryRate(FP, TP){\n//   /*Calculate the False Discovery Rate (FDR)\n//   FP: False Positive\n//   TP: True Positive\n//   */\n//   return math.round(100*FP/(FP + TP),2);\n// }\n\n// function computeArea(x, df) {\n//     X=eval(x)\n//     df=eval(df)\n//     with (Math) {\n// \t\tif (df<=0) {\n// \t\t\talert(\"Degrees of freedom must be positive\")\n// \t\t} else {\n// \t\t\tA=df/2;\n// \t\t\tS=A+.5;\n// \t\t\tZ=df/(df+X*X);\n// \t\t\tBT=exp(LogGamma(S)-LogGamma(.5)-LogGamma(A)+A*log(Z)+.5*log(1-Z));\n// \t\t\tif (Z<(A+1)/(S+2)) {\n// \t\t\t\tbetacdf=BT*Betinc(Z,A,.5)\n// \t\t\t} else {\n// \t\t\t\tbetacdf=1-BT*Betinc(1-Z,.5,A)\n// \t\t\t}\n// \t\t\tif (X<0) {\n// \t\t\t\ttcdf=betacdf/2\n// \t\t\t} else {\n// \t\t\t\ttcdf=1-betacdf/2\n// \t\t\t}\n// \t\t}\n// \t\t// tcdf=round(tcdf*100000)/100000;\n// \t\t// tcdf=tcdf*100000/100000;\n// \t}\n//     return round(tcdf);\n// }\n\n// function LogGamma(Z) {\n// \twith (Math) {\n// \t\tvar S=1+76.18009173/Z-86.50532033/(Z+1)+24.01409822/(Z+2)-1.231739516/(Z+3)+.00120858003/(Z+4)-.00000536382/(Z+5);\n// \t\tvar LG= (Z-.5)*log(Z+4.5)-(Z+4.5)+log(S*2.50662827465);\n// \t}\n// \treturn LG\n// }\n\n// function Betinc(X,A,B) {\n// \tvar A0=0;\n// \tvar B0=1;\n// \tvar A1=1;\n// \tvar B1=1;\n// \tvar M9=0;\n// \tvar A2=0;\n// \tvar C9;\n// \twhile (Math.abs((A1-A2)/A1)>.00001) {\n// \t\tA2=A1;\n// \t\tC9=-(A+M9)*(A+B+M9)*X/(A+2*M9)/(A+2*M9+1);\n// \t\tA0=A1+C9*A0;\n// \t\tB0=B1+C9*B0;\n// \t\tM9=M9+1;\n// \t\tC9=M9*(B-M9)*X/(A+2*M9-1)/(A+2*M9);\n// \t\tA1=A0+C9*A1;\n// \t\tB1=B0+C9*B1;\n// \t\tA0=A0/B1;\n// \t\tB0=B0/B1;\n// \t\tA1=A1/B1;\n// \t\tB1=1;\n// \t}\n// \treturn A1/A\n// }\n\n// function getLineChart(axes, group1, group2, p_value, crit_t_value){\n//   return new Chart(elem(\"line_chart\"), {\n//       type: 'scatter',\n//       data: {\n//         datasets: [{\n//             data: [\n//               {x: axes.x_min, y: 0},\n//               {x: axes.x_max, y: 0},\n//             ],\n//             label: \"refs\",\n//             borderColor: \"transparent\",\n//             fill: false\n//           },{\n//             data: group1.dist,\n//             label: \"Group 1\",\n//             borderColor: \"#ff0000\",\n//             fill: false\n//           }, {\n//             data: group2.dist,\n//             label: \"Group 2\",\n//             borderColor: \"#0000ff\",\n//             fill: false,\n//           }, {\n//             data: [], // Alpha Curve\n//             label: \"\\u03B1\",\n//             borderColor: \"transparent\",\n//             backgroundColor: \"#ff000055\",\n//             fill: true\n//           }, {\n//             data: [], // Beta Curve\n//             label: \"\\u03B2\",\n//             borderColor: \"transparent\",\n//             backgroundColor: \"#0000ff55\",\n//             fill: true\n//           }\n//         ]\n//       },\n//       options: {\n//         animation: false,\n//         title: {\n//           display: false,\n//           text: 't-test'\n//         },\n//         legend:{\n//           position: 'bottom',\n//           labels: {\n//             filter: function(item, chart) {\n//                 return !item.text.includes('refs'); // Remove the refs legend item\n//               },\n//              usePointStyle: true,\n//            },\n//         },\n//         elements: {\n//           point:{\n//               radius: 0\n//           }\n//         },\n//         scales: {\n//           xAxes: [{\n//               ticks : {\n//               min: axes.x_min,\n//               stepSize: axes.step_size,\n//                   max: axes.x_max,\n//               },\n//             display: true,\n//             gridLines: {\n//               display:false,\n//             },\n//             scaleLabel: {\n//               display: true,\n//               labelString: 't'\n//             }\n//           }],\n//           yAxes: [{\n//             ticks : {\n//               min: 0,\n//               max: axes.y_max,\n//             },\n//             display: true,\n//             scaleLabel: {\n//               display: true,\n//               labelString: 'Normalized Frequency'\n//             },\n//             gridLines: {\n//                 display:false\n//             }\n//           }]\n//         },\n//         annotation: {\n//           annotations: [{\n//             type: 'line',\n//             mode: 'vertical',\n//             scaleID: 'x-axis-1',\n//             value: t_value,\n//             borderColor: '#c8c8c8',\n//             borderWidth: 2,\n//             borderDash: [10,5],\n//             label: {\n//               enabled: true,\n//               content: 'p = ' + p_value,\n//               backgroundColor: 'transparent',\n//               fontColor: '#c8c8c8',\n//               position: \"top\",\n//             }\n//           },{\n//             type: 'line',\n//             mode: 'vertical',\n//             scaleID: 'x-axis-1',\n//             value: crit_t_value,\n//             borderColor: '#ff7034',\n//             borderWidth: 2,\n//             label: {\n//               enabled: true,\n//               content: '\\u03B1',\n//               backgroundColor: 'transparent',\n//               fontColor: '#4d4e4f',\n//               yAdjust: 20,\n//               position: \"top\",\n//             }\n//           }\n//           ],\n//           drawTime: \"afterDatasetsDraw\" \n//         }\n//       }\n//     });\n// }\n\n// function getROCChart(roc_curve){\n//   return new Chart(elem(\"roc_curve\"), {\n//       type: 'scatter',\n//       data: {\n//         datasets: [{\n//             data: [\n//               {x: 0, y: 0},\n//               {x: 1, y: 1},\n//             ],\n//             label: \"refs\",\n//             borderColor: \"transparent\",\n//             fill: false\n//           },{\n//             data: [], \n//             label: \"TPR\",\n//             borderColor: \"#000000\",\n//             backgroundColor: \"#000000\",\n//             fill: true,\n//             pointRadius: 4\n//           }, {\n//             data: [{x:0,y:0}, {x:1,y:1}], // random curve for reference\n//             label: \"Random\",\n//             borderColor: \"#dedede\",\n//             fill: false\n//           },{\n//             data: roc_curve,\n//             label: \"ROC curve\",\n//             borderColor: \"#7600bc\",\n//             backgroundColor: \"#ca5cdd\",\n//             fill: true\n//             // ,pointRadius: 4\n//           }\n//         ]\n//       },\n//       options: {\n//         animation: false,\n//         title: {\n//           display: false,\n//           text: 't-test'\n//         },\n//         legend:{\n//           position: 'bottom',\n//           labels: {\n//             filter: function(item, chart) {\n//                 return !item.text.includes('refs'); // Remove the refs legend item\n//               },\n//              usePointStyle: true,\n//            },\n//         },\n//         elements: {\n//           point:{\n//               radius: 0\n//           }\n//         },\n//         scales: {\n//           xAxes: [{\n//               ticks : {\n//                 min: 0,\n//                 stepSize: 0.2,\n//                 // stepValue: 0.2,\n//                 steps: 10,\n//                 max: 1,\n//               },\n//             display: true,\n//             gridLines: {\n//               display:false,\n//             },\n//             scaleLabel: {\n//               display: true,\n//               labelString: 'False positive rate (\\u03B1)'\n//             }\n//           }],\n//           yAxes: [{\n//             ticks : {\n//               min: 0,\n//               stepSize: 0.2,\n//               max: 1,\n//             },\n//             display: true,\n//             scaleLabel: {\n//               display: true,\n//               labelString: 'True positive rate (1 - \\u03B2)'\n//             },\n//             gridLines: {\n//                 display:false\n//             }\n//           }]\n//         },\n//         annotation: {\n//           annotations: [{\n//             type: 'line',\n//             mode: 'vertical',\n//             scaleID: 'x-axis-1',\n//             value: t_value,\n//             borderColor: '#c8c8c8',\n//             borderWidth: 2,\n//             borderDash: [10,5],\n//             label: {\n//               enabled: true,\n//               content: 'p = ',\n//               backgroundColor: 'transparent',\n//               fontColor: '#c8c8c8',\n//               position: \"top\",\n//             }\n//           },{\n//             type: 'line',\n//             mode: 'vertical',\n//             scaleID: 'x-axis-1',\n//             value: p_value,\n//             borderColor: '#ff7034',\n//             borderWidth: 2,\n//             label: {\n//               enabled: true,\n//               content: '',\n//               backgroundColor: 'transparent',\n//               fontColor: '#4d4e4f',\n//               yAdjust: 20,\n//               position: \"top\",\n//             }\n//           }\n//           ],\n//           drawTime: \"afterDatasetsDraw\" \n//         }\n//       }\n//     });\n// }\n\n//     /*\n//     Functions below may be used at a future date.\n\n//     BELOW FOR NORMAL CURVE (Z-TEST)\n//     function error_f(x, mean, sd){\n//       return (1/(sd*math.sqrt(2*math.pi)))*math.exp((-((x-mean) ** 2))/(2*sd ** 2));\n//     }\n\n//     function area_under_curve(x1, x2, mean, sd){\n//       return -0.5*(math.erf((mean-x2)/(math.sqrt(2)*sd)) - math.erf((mean-x1)/(math.sqrt(2)*sd)));\n//     }\n\n//     const width  = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n//     if (width <= 1000){\n//       lineChart.options.annotation.annotations[0].label['enabled'] = true;\n//       lineChart.options.annotation.annotations[1].label['enabled'] = true;\n//       lineChart.update();\n//     }\n//     */\n\n//     /*\n//     Bayes Factor = Likelihood Ratio = Sensitivity / False Positive Rate\n//     *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/welchs.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "aa435c1107b4e742"; }
/******/ }();
/******/ 
/******/ }
);